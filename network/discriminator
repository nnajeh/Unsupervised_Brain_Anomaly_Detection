class Discriminator(nn.Module):

    def __init__(self, base_channels=64, n_classes=2, channel =3):
        super().__init__()

        self.blocks = nn.Sequential(
                DResidualBlock(channel, base_channels, downsample=True, use_preactivation=False),
                DResidualBlock(base_channels, 2 * base_channels, downsample=True, use_preactivation=True),
                DResidualBlock(2 * base_channels, 4 * base_channels, downsample=True, use_preactivation=True),
                DResidualBlock(4 * base_channels, 8 * base_channels, downsample=True, use_preactivation=True),
                DResidualBlock(8 * base_channels, 16 * base_channels, downsample=True, use_preactivation=True),
                nn.ReLU()
        )

        self.linear = SNLinear(16 *4*4* base_channels, 1)


    def extract_features(self, x):
        h = x.view(-1, 3, 128,128)
        h = self.blocks(x)
        output = h.view(-1,1024*4*4)
        return output

    def forward(self, x):
        h = self.extract_features(x)
        h = self.linear(h)
        h = h.view(-1)
        return h
