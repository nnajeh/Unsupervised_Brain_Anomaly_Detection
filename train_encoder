import os
import torch
import torch.nn as nn
from torch import autograd, optim
from torch.utils.data import DataLoader, Dataset

import torchvision
from torchvision import transforms
from torchvision.utils import save_image

import torch.nn.functional as F
import numpy as np
import matplotlib.pyplot as plt
import random
import torchvision.datasets as dataset
import torchvision.datasets
from PIL import Image


train_total_e_losses, val_total_e_losses = [],[]
min_valid_loss_e = np.inf
for e in range(7000):
        e_running_loss =0.0
        losses = []
        E.train()

        for i, (x, _, _) in enumerate(train_dataloader,0):
            x = x.to(device, dtype=torch.float)

            code = E(x)

            rec_image = pretrained_G(code)

            d_input = torch.cat((x, rec_image), dim=0)
            f_x, f_gx = pretrained_D.extract_features(d_input).chunk(2, 0)

            loss = crit(rec_image, x) + alpha * crit(f_gx, f_x.detach())

            optimizer_E.zero_grad()
            loss.backward()
            optimizer_E.step()

            losses.append(loss.item())
            e_running_loss += loss.item()


        print(e, np.mean(losses))

        train_total_e_losses.append(np.mean(losses))

        image_check(rec_image.cpu())



        save_image(d_input*0.5+0.5, './rec'+str(e)+'.bmp')

        epoch_len = len(str(7000))
        print(f"[{e:>{epoch_len}}/{7000:>{epoch_len}}] "
              f"[E_Train_Loss: {loss.item()}]"
             )

        if e%20 ==0 and e!=0:
            torch.save(E.state_dict(), f"./E-{e}.pth")
